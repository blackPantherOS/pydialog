--- pydialog.py.old	2017-03-21 10:01:22.000000000 +0100
+++ pydialog.py	2017-10-09 23:39:00.107672603 +0200
@@ -58,31 +58,33 @@
 
     # TODO: Untested options below
     parser.add_argument("--slider", metavar=_("<text> [minvalue] [maxvalue] [step]"), help=_("Slider dialog box, returns selected value"), nargs="+")    
-
-    # TODO: Unfinished options below
-    parser.add_argument("--combobox", metavar=_("<text> item [item] [item] ..."), help=_("ComboBox dialog"), nargs='+')
-
-    parser.add_argument("--textinputbox", metavar=_("<text> <init> [width] [height]"), help=_("Text Input Box dialog"), nargs='+')
-    parser.add_argument("--passivepopup", metavar=_("<text> <timeout>"), help=_("Passive Popup"), nargs='+')
-
-     # TODO: Waiting for GUI
-
+    parser.add_argument("--tab", metavar=_("<primary tab name> <secondary tab name> ..."), help=_("Open a new tab"), nargs='+')
     parser.add_argument("--getopenfilename", metavar=_("[startDir] [filter]"), help=_("File dialog to open an existing file"), nargs='*')
     parser.add_argument("--getsavefilename", metavar=_("[startDir] [filter]"), help=_("File dialog to save a file"), nargs='*')
     parser.add_argument("--getexistingdirectory", metavar=_("[startDir]"), help=_("File dialog to select an existing directory"), nargs='*')
     parser.add_argument("--getopenurl", metavar=_("[startDir] [filter]"), help=_("File dialog to open an existing URL"), nargs='*')
-    parser.add_argument("--getsaveurl", metavar=_("[startDir] [filter]"), help=_("File dialog to save a URL"), nargs='*')
-    parser.add_argument("--geticon", metavar=_("[group] [context]"), help=_("Icon chooser dialog"), nargs='*')
-    parser.add_argument("--getcolor", help=_("Color dialog to select a color"))
+    parser.add_argument("--getsaveurl", metavar=_("[startDir] [filter]"), help=_("File dialog to save a URL"), nargs='*') # TODO: The path is not relative!
+    parser.add_argument("--getcolor", help=_("Color dialog to select a color"), action='store_true')
+    parser.add_argument("--textbox", metavar=_("<file> [width] [height]"), help=_("Text Box dialog"), nargs='+')
+    parser.add_argument("--combobox", metavar=_("<text> item [item] [item] ..."), help=_("ComboBox dialog"), nargs='+')
+    parser.add_argument("--textinputbox", metavar=_("<text> <init> [width] [height]"), help=_("Text Input Box dialog"), nargs='+')
+    parser.add_argument("--multiple", help=_("Allows the --getopenurl and --getopenfilename options to return multiple files"), action='store_true')
     parser.add_argument("--default", metavar=_("<text>"), help=_("Default entry to use for combobox, menu and color"), nargs='?')
-    parser.add_argument("--multiple", help=_("Allows the --getopenurl and --getopenfilename options to return multiple files"))
+
+    # TODO: Unfinished options below
+    parser.add_argument("--passivepopup", metavar=_("<text> <timeout>"), help=_("Passive Popup"), nargs='+')
+
+    parser.add_argument("--dontagain", metavar=_("<file:entry>"), help=_("Config file and option name for saving the 'do-not-show/ask-again' state"), nargs=1)
     parser.add_argument("--print-winid", help=_("Outputs the winId of each dialog"), dest="printwinid")
-    parser.add_argument("--dontagain", metavar=_("<file:entry>"), help=_("Config file and option name for saving the 'do-not-show/ask-again' state"), nargs='+')
-    parser.add_argument("--calendar", metavar=_("<text>"), help=_("Calendar dialog box, returns selected date"), nargs=1)
     parser.add_argument("--attach", metavar=_("<winid>"), help=_("Makes the dialog transient for an X app specified by winid"), nargs=1)
-    parser.add_argument("--textbox", metavar=_("<file> [width] [height]"), help=_("Text Box dialog"), nargs='+')
 
-    parser.add_argument("--tab", metavar=_("<primary tab name> <secondary tab name> ..."), help=_("Open a new tab"), nargs='+')
+     # TODO: Waiting for GUI
+
+    parser.add_argument("--calendar", metavar=_("<text>"), help=_("Calendar dialog box, returns selected date"), nargs=1)
+    parser.add_argument("--geticon", metavar=_("[group] [context]"), help=_("Icon chooser dialog"), nargs='*')
+
+    # The pydialog's own arguments (do not use them in the kdialog!)
+
     parser.add_argument("--stayontop", help=_("The window stays on top"), action='store_true')
 
     parser.add_argument("--antisegfault", action='store_true')
@@ -96,10 +98,7 @@
         arguments.error = [_("PyDialog - %s: %s") % (error_type, name)]
 
 
-    unfinished = ["combobox", "textinputbox", "passivepopup",
-        "getopenfilename", "getsavefilename", "getexistingdirectory", "getopenurl",
-        "getsaveurl", "geticon", "getcolor", "default", "multiple", "printwinid",
-        "dontagain", "calendar", "attach", "textbox"]
+    unfinished = ["passivepopup", "geticon", "printwinid", "calendar", "attach"]
     
     for argument in unfinished:
         if not eval("arguments."+argument) is None:
@@ -111,6 +110,96 @@
 arguments = call_parser()
 return_keyword = "<PYDIALOG-RESULT:"
 
+pydialog_title = _("pydialog")
+if arguments.title:
+    pydialog_title = arguments.title
+
+if arguments.getopenfilename or arguments.getsavefilename or arguments.getexistingdirectory or\
+arguments.getopenurl or arguments.getsaveurl or arguments.getcolor:
+    from PyQt5.QtWidgets import QFileDialog, QApplication, QDialog
+    app = QApplication(sys.argv)
+    filters = _("All Files (*)")
+    if arguments.getopenfilename:
+        directory = arguments.getopenfilename[0]
+        if len(arguments.getopenfilename) > 1:
+            filters = arguments.getopenfilename[1]
+    elif arguments.getsavefilename:
+        directory = arguments.getsavefilename[0]
+        if len(arguments.getsavefilename) > 1:
+            filters = arguments.getsavefilename[1]
+    elif arguments.getexistingdirectory:
+        directory = arguments.getexistingdirectory[0]
+    elif arguments.getopenurl:
+        directory = arguments.getopenurl[0]
+        if len(arguments.getopenurl) > 1:
+            filters = arguments.getopenurl[1]
+    elif arguments.getsaveurl:
+        directory = arguments.getsaveurl[0]
+        if len(arguments.getsaveurl) > 1:
+            filters = arguments.getsaveurl[1]
+    if arguments.getopenfilename:
+        if arguments.multiple:
+            try:
+                files, filt = QFileDialog.getOpenFileNames(None, pydialog_title, directory, filters)
+                print(" ".join(files))
+                sys.exit(0)
+            except:
+                pass
+        else:
+            dialog = QFileDialog(None, pydialog_title, directory, filters)
+            if dialog.exec_() == QDialog.Accepted:
+                print(dialog.selectedFiles()[0])
+                sys.exit(0)
+    elif arguments.getsavefilename:
+        from os.path import relpath
+        savefilename = relpath(QFileDialog.getSaveFileName(None, pydialog_title, directory, filters)[0])
+        print(savefilename)
+        sys.exit(0)
+    elif arguments.getexistingdirectory:
+        existingdirectory = QFileDialog.getExistingDirectory(None, pydialog_title, directory)
+        print(existingdirectory)
+        sys.exit(0)
+    elif arguments.getopenurl:
+        if arguments.multiple:
+            r = [e.toString() for e in QFileDialog.getOpenFileUrls(None, pydialog_title, directory, filters)[0]]
+            urls = " ".join(r)
+            print(urls)
+        else:
+            url = QFileDialog.getOpenFileUrl(None, pydialog_title, directory, filters)[0].toString()
+            print(url)
+            sys.exit(0)
+    elif arguments.getsaveurl:
+        url = QFileDialog.getSaveFileUrl(None, pydialog_title, directory, filters)[0].toString()
+        print(url)
+        sys.exit(0)
+    elif arguments.getcolor:
+        from PyQt5.QtWidgets import QColorDialog
+        if arguments.default:
+            from PyQt5.QtGui import QColor
+            color = QColorDialog.getColor(QColor(arguments.default)).name()
+        else:
+            color = QColorDialog.getColor().name()
+        print(color)
+        sys.exit(0)
+    sys.exit(1)
+
+def dontagain_available():
+    if arguments.yesno or arguments.yesnocancel or arguments.warningyesno:
+        return True
+    elif arguments.warningcountinuecancel or arguments.warningyesnocancel or arguments.msgbox:
+        return True
+    else:
+        return False
+
+if arguments.dontagain and dontagain_available():
+    import configparser, os
+    config_section = "Notification Messages"
+    config = configparser.ConfigParser()
+    file, config_key = arguments.dontagain[0].split(':')
+    config_file = os.getenv("HOME") + "/.config/" + file
+    config.read(config_file)
+    if config.has_option(config_section, config_key):
+        sys.exit(config.getint(config_section, config_key))
 
 # DO NOT REMOVE! IT IS A SOLUTION TO A PYQT5 BUG (SEGFAULT)
 if not arguments.antisegfault:
@@ -172,15 +261,20 @@
 
 from modules import window1
 
-
 class MainWindow(QDialog, window1.Ui_PyDialog):
     def __init__(self, parent=None):
         global arguments, return_keyword
         self.event_entered = False
         self.event2_entered = False
+
         super(MainWindow, self).__init__(parent)
         self.setupUi(self)
         
+        if arguments.dontagain:
+            from PyQt5.QtWidgets import QCheckBox
+            self.dontagain_checkBox = QCheckBox(_("Don't show or ask this again."), self)
+            self.verticalLayout.addWidget(self.dontagain_checkBox)
+        
         if arguments.stayontop:
             from PyQt5.QtCore import Qt
             self.setWindowFlags(Qt.WindowStaysOnTopHint)
@@ -201,6 +295,16 @@
         self.create_elements()
         self.word_wrap()
 
+    def save_dontask(self, value):
+        if arguments.dontagain and dontagain_available() and value != 2:
+            if self.dontagain_checkBox.isChecked():
+                import configparser
+                config = configparser.ConfigParser()
+                config[config_section] = {}
+                config[config_section][config_key] = value
+                with open(config_file, 'w') as file:
+                    config.write(file)
+
     def word_wrap(self):
         if self.label.sizeHint().width() > 600:
             self.label.setWordWrap(True)
@@ -239,7 +343,7 @@
         """ Initial configurations (buttons and labels) """
         global arguments
         if arguments.title:
-            self.setWindowTitle(arguments.title)
+            self.setWindowTitle(pydialog_title)
         if arguments.icon:
             from PyQt5.QtGui import QIcon
             icon = QIcon(arguments.icon)
@@ -259,14 +363,29 @@
             else:
                 self.label.setText(arguments.warningyesnocancel)
 
-        elif arguments.sorry or arguments.error or arguments.msgbox:
+        elif arguments.sorry or arguments.error or arguments.msgbox or arguments.textbox:
             self.enable_buttons(["ok_button"])
             if arguments.sorry:
                 self.label.setText(arguments.sorry)
             elif arguments.error:
                 self.label.setText(arguments.error)
-            else:
+            elif arguments.msgbox:
                 self.label.setText(arguments.msgbox)
+            elif arguments.textbox:
+                from PyQt5.QtWidgets import QTextBrowser
+                width = 400
+                height = 250
+                url = arguments.textbox[0]
+                if len(arguments.textbox) > 1:
+                    width = int(arguments.textbox[1])
+                    if len(arguments.textbox) > 2:
+                        height = int(arguments.textbox[2])
+                self.textbrowser = QTextBrowser()
+                self.textbrowser.setMinimumSize(width, height)
+                self.verticalLayout_2.addWidget(self.textbrowser)
+                file = open(url, "r")
+                self.textbrowser.setText(file.read())
+                file.close()
 
         elif arguments.detailedsorry or arguments.detailederror:
             self.enable_buttons(["details_button", "ok_button"])
@@ -309,6 +428,32 @@
             self.label.setText(arguments.password[0])
             self.label_2.setText(_("Password:"))
 
+        elif arguments.combobox:
+            self.comboBox.addItems(arguments.combobox[1:])
+            if arguments.default:
+                self.comboBox.setCurrentText(arguments.default)
+            self.label_2.setParent(None)
+            self.enable_buttons(["ok_button", "cancel_button"])
+            self.label.setText(arguments.combobox[0])
+            
+        elif arguments.textinputbox:
+            from PyQt5.QtWidgets import QTextEdit
+            self.enable_buttons(["ok_button"])
+            self.textedit = QTextEdit()
+            width = 400
+            height = 250
+            init_text = ""
+            self.label.setText(arguments.textinputbox[0])
+            if len(arguments.textinputbox) > 1:
+                init_text = arguments.textinputbox[1]
+                if len(arguments.textinputbox) > 2:
+                    width = int(arguments.textinputbox[2])
+                    if len(arguments.textinputbox) > 3:
+                        height = int(arguments.textinputbox[3])
+            self.textedit.setMinimumSize(width, height)
+            self.verticalLayout_2.addWidget(self.textedit)
+            self.textedit.setText(init_text)            
+
         elif arguments.checklist or arguments.radiolist or arguments.menu:
             if arguments.checklist:
                 scrollLayout, self.checkboxes = self.add_checkboxes()
@@ -436,6 +581,9 @@
                 buttongroup_results[radiobutton] = arguments.__dict__[name][i]
                 if i == 1:
                     radiobutton.setChecked(True)
+                if arguments.menu and arguments.default:
+                    if arguments.__dict__[name][i+1] == arguments.default:
+                        radiobutton.setChecked(True)
                 i += 2
             scrollLayout.addWidget(radiobutton)
             buttonGroup.addButton(radiobutton)
@@ -495,7 +643,9 @@
                  n = "2"
         radiobutton_name = self.__dict__["buttonGroup"+n].checkedButton()
         print(self.__dict__["buttongroup_results"+n][radiobutton_name])
-    
+
+    def get_combo_text(self):
+        print(self.comboBox.currentText())
 
     def ok_button_clicked(self):
         if arguments.slider:
@@ -506,19 +656,29 @@
             self.print_checkboxes()
         elif arguments.radiolist or arguments.menu:
             self.get_checked_radiobutton()
+        elif arguments.combobox:
+            self.get_combo_text()
+        elif arguments.textinputbox:
+            print(self.textedit.toPlainText())
         print(return_keyword+str(self.button_values["ok_button"])+">")
         self.done(0)
     
     def yes_button_clicked(self):
-        print(return_keyword+str(self.button_values["yes_button"])+">")
+        value = str(self.button_values["yes_button"])
+        print(return_keyword+value+">")
+        self.save_dontask(value)
         self.done(0)
     
     def no_button_clicked(self):
-        print(return_keyword+str(self.button_values["no_button"])+">")
+        value = str(self.button_values["no_button"])
+        print(return_keyword+value+">")
+        self.save_dontask(value)
         self.done(0)
     
     def continue_button_clicked(self):
-        print(return_keyword+str(self.button_values["continue_button"])+">")
+        value = str(self.button_values["continue_button"])
+        print(return_keyword+value+">")
+        self.save_dontask(value)
         self.done(0)
 
     def save_button_clicked(self):
@@ -526,7 +686,8 @@
         self.done(0)
     
     def reject(self):
-        print(return_keyword+str(self.reject_value)+">")
+        value = str(self.reject_value)
+        print(return_keyword+value+">")
         self.done(0)
 
     def enable_buttons (self, button_list):
